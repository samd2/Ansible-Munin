---
sudo: required

#testing

env:
  # MUNIN CLIENT
  # Test general usage. 
  - distro: debian8
    init: /lib/systemd/systemd
    run_opts: >
     "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    ansible_vars: >
     '{"run_munin_client": true, "groups": { "monitoring-servers": "localhost" }}'
    playbook: test.yml
  - distro: centos7
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    ansible_vars: >
     '{"run_munin_client": true, "groups": { "monitoring-servers": "localhost" }}'
    playbook: test.yml
  - distro: ubuntu1404
    init: /sbin/init
    run_opts: ""
    ansible_vars: >
     '{"run_munin_client": true, "groups": { "monitoring-servers": "localhost" }}'
    playbook: test.yml
  - distro: ubuntu1604
    init: /lib/systemd/systemd
    run_opts: > 
     '--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro'
    ansible_vars: >
     '{"run_munin_client": true, "groups": { "monitoring-servers": "localhost" }}'
    playbook: test.yml

  # Test different options.
  - distro: centos7
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    ansible_vars: >
     '{"run_munin_client": true, "groups": { "monitoring-servers": "localhost" }}'
    playbook: test-vars.yml
  - distro: debian8
    init: /lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    ansible_vars: >
     '{"run_munin_client": true, "groups": { "monitoring-servers": "localhost" }}'
    playbook: test-vars.yml
  - distro: ubuntu1404
    init: /sbin/init
    run_opts: ""
    ansible_vars: >
     '{"run_munin_client": true, "groups": { "monitoring-servers": "localhost" }}'
    playbook: test-vars.yml
  - distro: ubuntu1604
    init: /lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    ansible_vars: >
     '{"run_munin_client": true, "groups": { "monitoring-servers": "localhost" }}'
    playbook: test-vars.yml

  # MUNIN SERVER
  # Test general usage.
  - distro: centos7
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    ansible_vars: >
     '{"run_munin_server": true, "groups": { "monitoring-servers": "localhost" }}'
    playbook: test.yml
  - distro: debian8
    init: /lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    ansible_vars: >
     '{"run_munin_server": true, "groups": { "monitoring-servers": "localhost" }}'
    playbook: test.yml
  - distro: ubuntu1404
    init: /sbin/init
    run_opts: ""
    ansible_vars: >
     '{"run_munin_server": true, "groups": { "monitoring-servers": "localhost" }}'
    playbook: test.yml
  - distro: ubuntu1604
    init: /sbin/init
    run_opts: ""
    ansible_vars: >
     '{"run_munin_server": true, "groups": { "monitoring-servers": "localhost" }}'
    playbook: test.yml

  # Test different options.
  - distro: centos7
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    ansible_vars: >
     '{"run_munin_server": true, "groups": { "monitoring-servers": "localhost" }}'
    playbook: test-vars.yml
  - distro: debian8
    init: /lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    ansible_vars: >
     '{"run_munin_server": true, "groups": { "monitoring-servers": "localhost" }}'
    playbook: test-vars.yml
  - distro: ubuntu1404
    init: /sbin/init
    run_opts: ""
    ansible_vars: >
     '{"run_munin_server": true, "groups": { "monitoring-servers": "localhost" }}'
    playbook: test-vars.yml
  - distro: ubuntu1604
    init: /lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    ansible_vars: >
     '{"run_munin_server": true, "groups": { "monitoring-servers": "localhost" }}'
    playbook: test-vars.yml

services:
  - docker

before_install:
  # Pull container.
  - 'sudo docker pull sdarwin/docker-${distro}-ansible:latest'

script:
  - container_id=$(mktemp)
  # Run container in detached state.
  - 'sudo docker run --detach --volume="${PWD}":/etc/ansible/roles/role_under_test:ro ${run_opts} sdarwin/docker-${distro}-ansible:latest "${init}" > "${container_id}"'

  # Ansible syntax check.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook --extra-vars ''${ansible_vars}'' /etc/ansible/roles/role_under_test/tests/${playbook} --syntax-check'

  # Test role.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook --extra-vars ''${ansible_vars}'' /etc/ansible/roles/role_under_test/tests/${playbook}'

  # Test role idempotence.
  - idempotence=$(mktemp)
  - 'sudo docker exec "$(cat ${container_id})" ansible-playbook --extra-vars ''${ansible_vars}'' /etc/ansible/roles/role_under_test/tests/${playbook} | tee -a ${idempotence}'
  - >
    tail ${idempotence}
    | grep -q 'changed=0.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && exit 1)

  # Check if munin is responding on port 4949.
  # TODO

after_success:
  # Clean up.
  - 'sudo docker stop "$(cat ${container_id})"'

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
